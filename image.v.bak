module image(clk,sel,din0,din1,din2,din3,din4,din5,din6,din7,din8,dout);
input clk;
input [7:0] din0, din1, din2, din3, din4, din5, din6, din7, din8;
input [1:0] sel;
output reg [8:0] dout;

//reg [8:0] dout0;
//reg [8:0] dout1;
//reg [8:0] dout2;

reg [31:0] t,t1,t2,t3,a,b;
//gray g(.clk(clk), .red_in(din0), .green_in(din1), .blue_in(din2), .gray_out(dout0));
//blur b(.clk(clk), .din0(din0), .din1(din1), .din2(din2), .din3(din3), .din4(din4), .din5(din5), .din6(din6), .din7(din7), .din8(din8), .dout(dout1));
//sobel s(.clk(clk), .din0(din0), .din1(din1), .din2(din2), .din3(din3), .din4(din4), .din5(din5), .din6(din6), .din7(din7), .din8(din8), .dout(dout2));

  always @(posedge clk) begin
    case (sel)
      2'b00: begin
				dout = (din0*299  + din1*587  + din2*114)/1000;
		end
      2'b01: begin
			t = 45354*din0 + 56641*din1 + 45354*din2 + 56641*din3 + 70736*din4 + 56641*din5 + 45354*din6 + 56641*din7 + 45354*din8;
			dout = t/1000000;
			t1 = t%1000000;
			if (t1 > 499999)
				dout = dout + 1;
			else dout = dout;
		end
      2'b10: begin
			t1 = (-1)*din0 + 0*din1 + 1*din2 + (-2)*din3 + 0*din4 + 2*din5 + (-1)*din6 + 0*din7 + 1*din8;
			t2 = (-1)*din0 + (-2)*din1 + (-1)*din2 + 0*din3 + 0*din4 + 0*din5 + 1*din6 + 2*din7 + 1*din8;
			if (t1 > 255) t1 =0;
			if (t2 > 255) t2 =0;
			a = (t1 > t2) ? t1 : t2;
			b = (t1 > t2) ? t2 : t1;
			t3 = a*7/8 + b/2;
			if (a*7%8  > 4 || b % 2 == 1 )
				t3 = t3 + 1;
			dout = (t3 > a) ? t3 : a;
		end
      default: dout <= 0; 
    endcase
  end

endmodule

